// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/carousel/carousel.proto

package carousel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Carousels service

func NewCarouselsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Carousels service

type CarouselsService interface {
	//获取伦布图列表
	List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//保存伦布图
	Save(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//更新轮播图
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//轮播图详情
	Info(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//删除轮播图
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type carouselsService struct {
	c    client.Client
	name string
}

func NewCarouselsService(name string, c client.Client) CarouselsService {
	return &carouselsService{
		c:    c,
		name: name,
	}
}

func (c *carouselsService) List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Carousels.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselsService) Save(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Carousels.Save", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselsService) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Carousels.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselsService) Info(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Carousels.Info", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselsService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Carousels.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Carousels service

type CarouselsHandler interface {
	//获取伦布图列表
	List(context.Context, *Request, *Response) error
	//保存伦布图
	Save(context.Context, *Request, *Response) error
	//更新轮播图
	Update(context.Context, *Request, *Response) error
	//轮播图详情
	Info(context.Context, *Request, *Response) error
	//删除轮播图
	Delete(context.Context, *Request, *Response) error
}

func RegisterCarouselsHandler(s server.Server, hdlr CarouselsHandler, opts ...server.HandlerOption) error {
	type carousels interface {
		List(ctx context.Context, in *Request, out *Response) error
		Save(ctx context.Context, in *Request, out *Response) error
		Update(ctx context.Context, in *Request, out *Response) error
		Info(ctx context.Context, in *Request, out *Response) error
		Delete(ctx context.Context, in *Request, out *Response) error
	}
	type Carousels struct {
		carousels
	}
	h := &carouselsHandler{hdlr}
	return s.Handle(s.NewHandler(&Carousels{h}, opts...))
}

type carouselsHandler struct {
	CarouselsHandler
}

func (h *carouselsHandler) List(ctx context.Context, in *Request, out *Response) error {
	return h.CarouselsHandler.List(ctx, in, out)
}

func (h *carouselsHandler) Save(ctx context.Context, in *Request, out *Response) error {
	return h.CarouselsHandler.Save(ctx, in, out)
}

func (h *carouselsHandler) Update(ctx context.Context, in *Request, out *Response) error {
	return h.CarouselsHandler.Update(ctx, in, out)
}

func (h *carouselsHandler) Info(ctx context.Context, in *Request, out *Response) error {
	return h.CarouselsHandler.Info(ctx, in, out)
}

func (h *carouselsHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.CarouselsHandler.Delete(ctx, in, out)
}
