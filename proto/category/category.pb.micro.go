// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/category/category.proto

package category

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Categories service

func NewCategoriesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Categories service

type CategoriesService interface {
	GetCategoryByPage(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Exist(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Save(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetCategoryById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//    rpc GetCategories4Search (Request) returns (Response) {
	//    }
	SelectByLevelAndParentIdsAndNumber(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type categoriesService struct {
	c    client.Client
	name string
}

func NewCategoriesService(name string, c client.Client) CategoriesService {
	return &categoriesService{
		c:    c,
		name: name,
	}
}

func (c *categoriesService) GetCategoryByPage(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Categories.GetCategoryByPage", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesService) Exist(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Categories.Exist", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesService) Save(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Categories.Save", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesService) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Categories.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesService) GetCategoryById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Categories.GetCategoryById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Categories.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesService) SelectByLevelAndParentIdsAndNumber(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Categories.SelectByLevelAndParentIdsAndNumber", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Categories service

type CategoriesHandler interface {
	GetCategoryByPage(context.Context, *Request, *Response) error
	Exist(context.Context, *Request, *Response) error
	Save(context.Context, *Request, *Response) error
	Update(context.Context, *Request, *Response) error
	GetCategoryById(context.Context, *Request, *Response) error
	Delete(context.Context, *Request, *Response) error
	//    rpc GetCategories4Search (Request) returns (Response) {
	//    }
	SelectByLevelAndParentIdsAndNumber(context.Context, *Request, *Response) error
}

func RegisterCategoriesHandler(s server.Server, hdlr CategoriesHandler, opts ...server.HandlerOption) error {
	type categories interface {
		GetCategoryByPage(ctx context.Context, in *Request, out *Response) error
		Exist(ctx context.Context, in *Request, out *Response) error
		Save(ctx context.Context, in *Request, out *Response) error
		Update(ctx context.Context, in *Request, out *Response) error
		GetCategoryById(ctx context.Context, in *Request, out *Response) error
		Delete(ctx context.Context, in *Request, out *Response) error
		SelectByLevelAndParentIdsAndNumber(ctx context.Context, in *Request, out *Response) error
	}
	type Categories struct {
		categories
	}
	h := &categoriesHandler{hdlr}
	return s.Handle(s.NewHandler(&Categories{h}, opts...))
}

type categoriesHandler struct {
	CategoriesHandler
}

func (h *categoriesHandler) GetCategoryByPage(ctx context.Context, in *Request, out *Response) error {
	return h.CategoriesHandler.GetCategoryByPage(ctx, in, out)
}

func (h *categoriesHandler) Exist(ctx context.Context, in *Request, out *Response) error {
	return h.CategoriesHandler.Exist(ctx, in, out)
}

func (h *categoriesHandler) Save(ctx context.Context, in *Request, out *Response) error {
	return h.CategoriesHandler.Save(ctx, in, out)
}

func (h *categoriesHandler) Update(ctx context.Context, in *Request, out *Response) error {
	return h.CategoriesHandler.Update(ctx, in, out)
}

func (h *categoriesHandler) GetCategoryById(ctx context.Context, in *Request, out *Response) error {
	return h.CategoriesHandler.GetCategoryById(ctx, in, out)
}

func (h *categoriesHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.CategoriesHandler.Delete(ctx, in, out)
}

func (h *categoriesHandler) SelectByLevelAndParentIdsAndNumber(ctx context.Context, in *Request, out *Response) error {
	return h.CategoriesHandler.SelectByLevelAndParentIdsAndNumber(ctx, in, out)
}
