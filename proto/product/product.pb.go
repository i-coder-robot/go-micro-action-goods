// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/product/product.proto

package product

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Product struct {
	Id                   int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductId            string  `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductName          string  `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductIntro         string  `protobuf:"bytes,4,opt,name=product_intro,json=productIntro,proto3" json:"product_intro,omitempty"`
	ProductCategoryId    int64   `protobuf:"varint,5,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"`
	ProductCoverImg      string  `protobuf:"bytes,6,opt,name=product_cover_img,json=productCoverImg,proto3" json:"product_cover_img,omitempty"`
	ProductCarousel      string  `protobuf:"bytes,7,opt,name=product_carousel,json=productCarousel,proto3" json:"product_carousel,omitempty"`
	OriginalPrice        float64 `protobuf:"fixed64,8,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`
	SellingPrice         float64 `protobuf:"fixed64,9,opt,name=selling_price,json=sellingPrice,proto3" json:"selling_price,omitempty"`
	StockNum             int32   `protobuf:"varint,10,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
	Tag                  string  `protobuf:"bytes,11,opt,name=tag,proto3" json:"tag,omitempty"`
	ProductSellStatus    int32   `protobuf:"varint,12,opt,name=product_sell_status,json=productSellStatus,proto3" json:"product_sell_status,omitempty"`
	CreateUser           int64   `protobuf:"varint,13,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
	UpdateUser           int64   `protobuf:"varint,14,opt,name=update_user,json=updateUser,proto3" json:"update_user,omitempty"`
	ProductDetailContent string  `protobuf:"bytes,15,opt,name=product_detail_content,json=productDetailContent,proto3" json:"product_detail_content,omitempty"`
	CreatedAt            string  `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string  `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fbc13de7c38f78, []int{0}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *Product) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Product) GetProductIntro() string {
	if m != nil {
		return m.ProductIntro
	}
	return ""
}

func (m *Product) GetProductCategoryId() int64 {
	if m != nil {
		return m.ProductCategoryId
	}
	return 0
}

func (m *Product) GetProductCoverImg() string {
	if m != nil {
		return m.ProductCoverImg
	}
	return ""
}

func (m *Product) GetProductCarousel() string {
	if m != nil {
		return m.ProductCarousel
	}
	return ""
}

func (m *Product) GetOriginalPrice() float64 {
	if m != nil {
		return m.OriginalPrice
	}
	return 0
}

func (m *Product) GetSellingPrice() float64 {
	if m != nil {
		return m.SellingPrice
	}
	return 0
}

func (m *Product) GetStockNum() int32 {
	if m != nil {
		return m.StockNum
	}
	return 0
}

func (m *Product) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Product) GetProductSellStatus() int32 {
	if m != nil {
		return m.ProductSellStatus
	}
	return 0
}

func (m *Product) GetCreateUser() int64 {
	if m != nil {
		return m.CreateUser
	}
	return 0
}

func (m *Product) GetUpdateUser() int64 {
	if m != nil {
		return m.UpdateUser
	}
	return 0
}

func (m *Product) GetProductDetailContent() string {
	if m != nil {
		return m.ProductDetailContent
	}
	return ""
}

func (m *Product) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Product) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ListQuery struct {
	Limit int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort  string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Where string `protobuf:"bytes,4,opt,name=where,proto3" json:"where,omitempty"`
}

func (m *ListQuery) Reset()         { *m = ListQuery{} }
func (m *ListQuery) String() string { return proto.CompactTextString(m) }
func (*ListQuery) ProtoMessage()    {}
func (*ListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fbc13de7c38f78, []int{1}
}
func (m *ListQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListQuery.Merge(m, src)
}
func (m *ListQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListQuery proto.InternalMessageInfo

func (m *ListQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListQuery) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListQuery) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *ListQuery) GetWhere() string {
	if m != nil {
		return m.Where
	}
	return ""
}

type Request struct {
	ListQuery *ListQuery `protobuf:"bytes,1,opt,name=list_query,json=listQuery,proto3" json:"list_query,omitempty"`
	Product   *Product   `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fbc13de7c38f78, []int{2}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetListQuery() *ListQuery {
	if m != nil {
		return m.ListQuery
	}
	return nil
}

func (m *Request) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type Response struct {
	Valid       bool       `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Total       int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Product     *Product   `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	ProductList []*Product `protobuf:"bytes,4,rep,name=product_list,json=productList,proto3" json:"product_list,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_14fbc13de7c38f78, []int{3}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Response) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Response) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *Response) GetProductList() []*Product {
	if m != nil {
		return m.ProductList
	}
	return nil
}

func init() {
	proto.RegisterType((*Product)(nil), "product.Product")
	proto.RegisterType((*ListQuery)(nil), "product.ListQuery")
	proto.RegisterType((*Request)(nil), "product.Request")
	proto.RegisterType((*Response)(nil), "product.Response")
}

func init() { proto.RegisterFile("proto/product/product.proto", fileDescriptor_14fbc13de7c38f78) }

var fileDescriptor_14fbc13de7c38f78 = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x6e, 0x13, 0x4b,
	0x10, 0xf5, 0xf8, 0x11, 0xdb, 0xe5, 0x3c, 0xec, 0xbe, 0xd1, 0x55, 0x8b, 0x08, 0x63, 0x8c, 0x90,
	0x4c, 0x24, 0x1c, 0x91, 0xb0, 0x62, 0x97, 0x07, 0x42, 0x96, 0x50, 0x14, 0x26, 0xca, 0x7a, 0x34,
	0x78, 0x8a, 0x49, 0x8b, 0x9e, 0x69, 0xa7, 0xbb, 0x27, 0x90, 0xbf, 0x60, 0xc7, 0xaf, 0xf0, 0x09,
	0x2c, 0xb3, 0x64, 0x89, 0x92, 0x0d, 0x9f, 0x81, 0xfa, 0x31, 0x93, 0x20, 0x21, 0x91, 0xac, 0xa6,
	0xeb, 0x9c, 0x53, 0x7d, 0xaa, 0x5a, 0x55, 0x03, 0x1b, 0x0b, 0x29, 0xb4, 0xd8, 0x5a, 0x48, 0x91,
	0x14, 0x73, 0x5d, 0x7e, 0xa7, 0x16, 0x25, 0x6d, 0x1f, 0x8e, 0x7f, 0x35, 0xa1, 0x7d, 0xe4, 0xce,
	0x64, 0x15, 0xea, 0x2c, 0xa1, 0xc1, 0x28, 0x98, 0x34, 0xc2, 0x3a, 0x4b, 0xc8, 0x43, 0x00, 0x2f,
	0x8b, 0x58, 0x42, 0xeb, 0xa3, 0x60, 0xd2, 0x0d, 0xbb, 0x1e, 0x99, 0x25, 0xe4, 0x31, 0x2c, 0x97,
	0x74, 0x1e, 0x67, 0x48, 0x1b, 0x56, 0xd0, 0xf3, 0xd8, 0x61, 0x9c, 0x21, 0x79, 0x02, 0x2b, 0xd5,
	0x0d, 0xb9, 0x96, 0x82, 0x36, 0xad, 0xa6, 0xcc, 0x9b, 0x19, 0x8c, 0x4c, 0xe1, 0xbf, 0x52, 0x34,
	0x8f, 0x35, 0xa6, 0x42, 0x5e, 0x18, 0xbf, 0x96, 0xad, 0x63, 0xe0, 0xa9, 0x7d, 0xcf, 0xcc, 0x12,
	0xb2, 0x09, 0x83, 0x4a, 0x2f, 0xce, 0x51, 0x46, 0x2c, 0x4b, 0xe9, 0x92, 0xbd, 0x78, 0xad, 0x54,
	0x1b, 0x7c, 0x96, 0xa5, 0xe4, 0x19, 0xf4, 0x6f, 0xee, 0x96, 0xa2, 0x50, 0xc8, 0x69, 0xfb, 0x4f,
	0xa9, 0x87, 0xc9, 0x53, 0x58, 0x15, 0x92, 0xa5, 0x2c, 0x8f, 0x79, 0xb4, 0x90, 0x6c, 0x8e, 0xb4,
	0x33, 0x0a, 0x26, 0x41, 0xb8, 0x52, 0xa2, 0x47, 0x06, 0x34, 0x2d, 0x29, 0xe4, 0x9c, 0xe5, 0xa9,
	0x57, 0x75, 0xad, 0x6a, 0xd9, 0x83, 0x4e, 0xb4, 0x01, 0x5d, 0xa5, 0xc5, 0xfc, 0x63, 0x94, 0x17,
	0x19, 0x85, 0x51, 0x30, 0x69, 0x85, 0x1d, 0x0b, 0x1c, 0x16, 0x19, 0xe9, 0x43, 0x43, 0xc7, 0x29,
	0xed, 0xd9, 0x32, 0xcc, 0xf1, 0xf6, 0x0b, 0x98, 0x6b, 0x22, 0xa5, 0x63, 0x5d, 0x28, 0xba, 0x6c,
	0x13, 0xcb, 0x66, 0x8f, 0x91, 0xf3, 0x63, 0x4b, 0x90, 0x47, 0xd0, 0x9b, 0x4b, 0x8c, 0x35, 0x46,
	0x85, 0x42, 0x49, 0x57, 0xec, 0x4b, 0x81, 0x83, 0x4e, 0x14, 0x4a, 0x23, 0x28, 0x16, 0x49, 0x25,
	0x58, 0x75, 0x02, 0x07, 0x59, 0xc1, 0x4b, 0xf8, 0xbf, 0x74, 0x4c, 0x50, 0xc7, 0x8c, 0x47, 0x73,
	0x91, 0x6b, 0xcc, 0x35, 0x5d, 0xb3, 0x65, 0xad, 0x7b, 0xf6, 0xc0, 0x92, 0xfb, 0x8e, 0x33, 0x03,
	0xe1, 0x4c, 0x92, 0x28, 0xd6, 0xb4, 0xef, 0x06, 0xc2, 0x23, 0xbb, 0x96, 0x76, 0x16, 0x96, 0x1e,
	0x38, 0xda, 0x23, 0xbb, 0x7a, 0x1c, 0x41, 0xf7, 0x2d, 0x53, 0xfa, 0x5d, 0x81, 0xf2, 0x82, 0xac,
	0x43, 0x8b, 0xb3, 0x8c, 0x69, 0x3f, 0x6e, 0x2e, 0x20, 0x04, 0x9a, 0x8b, 0x38, 0x45, 0x3b, 0x6b,
	0x8d, 0xd0, 0x9e, 0x0d, 0xa6, 0x84, 0xd4, 0x7e, 0xbc, 0xec, 0xd9, 0x64, 0x7f, 0x3a, 0x45, 0x89,
	0x7e, 0x9e, 0x5c, 0x30, 0x3e, 0x85, 0x76, 0x88, 0x67, 0x05, 0x2a, 0x4d, 0x5e, 0x00, 0x70, 0xa6,
	0x74, 0x74, 0x66, 0xcc, 0xac, 0x47, 0x6f, 0x9b, 0x4c, 0xcb, 0x1d, 0xa8, 0xca, 0x08, 0xbb, 0xbc,
	0xaa, 0x68, 0x13, 0xca, 0xa5, 0xb0, 0xf6, 0xbd, 0xed, 0x7e, 0xa5, 0xf7, 0x0b, 0x12, 0x56, 0x5b,
	0xf3, 0x35, 0x80, 0x4e, 0x88, 0x6a, 0x21, 0x72, 0x85, 0xa6, 0x98, 0xf3, 0x98, 0xfb, 0xcd, 0xe9,
	0x84, 0x2e, 0x30, 0xa8, 0x16, 0x3a, 0xe6, 0xbe, 0x17, 0x17, 0xdc, 0x36, 0x69, 0xfc, 0xc3, 0x84,
	0xec, 0xdc, 0xec, 0x97, 0xa9, 0x92, 0x36, 0x47, 0x8d, 0xbf, 0x26, 0x94, 0x1b, 0x67, 0xba, 0xda,
	0xfe, 0x56, 0x87, 0x8e, 0x27, 0x14, 0x79, 0x05, 0x83, 0x37, 0xa8, 0xcb, 0x70, 0xef, 0xe2, 0xc8,
	0xbc, 0xe7, 0xcd, 0x05, 0xfe, 0xb1, 0x1e, 0x0c, 0x6e, 0x21, 0xae, 0xa7, 0x71, 0x8d, 0x4c, 0xa1,
	0xf5, 0xfa, 0x33, 0x53, 0xfa, 0xae, 0xfa, 0x2d, 0x58, 0xda, 0xb7, 0x93, 0x70, 0x8f, 0x84, 0x13,
	0x3b, 0x1b, 0xf7, 0x48, 0x38, 0x40, 0x8e, 0x77, 0x4f, 0x78, 0x0e, 0xcd, 0x59, 0xfe, 0x41, 0xdc,
	0x51, 0xbe, 0x47, 0xbf, 0x5f, 0x0d, 0x83, 0xcb, 0xab, 0x61, 0xf0, 0xf3, 0x6a, 0x18, 0x7c, 0xb9,
	0x1e, 0xd6, 0x2e, 0xaf, 0x87, 0xb5, 0x1f, 0xd7, 0xc3, 0xda, 0xfb, 0x25, 0xfb, 0xd3, 0xdc, 0xf9,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x02, 0x6c, 0xac, 0x53, 0x05, 0x00, 0x00,
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Product) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ProductDetailContent) > 0 {
		i -= len(m.ProductDetailContent)
		copy(dAtA[i:], m.ProductDetailContent)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductDetailContent)))
		i--
		dAtA[i] = 0x7a
	}
	if m.UpdateUser != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.UpdateUser))
		i--
		dAtA[i] = 0x70
	}
	if m.CreateUser != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.CreateUser))
		i--
		dAtA[i] = 0x68
	}
	if m.ProductSellStatus != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.ProductSellStatus))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x5a
	}
	if m.StockNum != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.StockNum))
		i--
		dAtA[i] = 0x50
	}
	if m.SellingPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SellingPrice))))
		i--
		dAtA[i] = 0x49
	}
	if m.OriginalPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OriginalPrice))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.ProductCarousel) > 0 {
		i -= len(m.ProductCarousel)
		copy(dAtA[i:], m.ProductCarousel)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductCarousel)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProductCoverImg) > 0 {
		i -= len(m.ProductCoverImg)
		copy(dAtA[i:], m.ProductCoverImg)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductCoverImg)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProductCategoryId != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.ProductCategoryId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ProductIntro) > 0 {
		i -= len(m.ProductIntro)
		copy(dAtA[i:], m.ProductIntro)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductIntro)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProductId) > 0 {
		i -= len(m.ProductId)
		copy(dAtA[i:], m.ProductId)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Where) > 0 {
		i -= len(m.Where)
		copy(dAtA[i:], m.Where)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Where)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sort) > 0 {
		i -= len(m.Sort)
		copy(dAtA[i:], m.Sort)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Sort)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Page != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Product != nil {
		{
			size, err := m.Product.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ListQuery != nil {
		{
			size, err := m.ListQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for iNdEx := len(m.ProductList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProductList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProduct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Product != nil {
		{
			size, err := m.Product.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Total != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProduct(dAtA []byte, offset int, v uint64) int {
	offset -= sovProduct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProduct(uint64(m.Id))
	}
	l = len(m.ProductId)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ProductIntro)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.ProductCategoryId != 0 {
		n += 1 + sovProduct(uint64(m.ProductCategoryId))
	}
	l = len(m.ProductCoverImg)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ProductCarousel)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.OriginalPrice != 0 {
		n += 9
	}
	if m.SellingPrice != 0 {
		n += 9
	}
	if m.StockNum != 0 {
		n += 1 + sovProduct(uint64(m.StockNum))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.ProductSellStatus != 0 {
		n += 1 + sovProduct(uint64(m.ProductSellStatus))
	}
	if m.CreateUser != 0 {
		n += 1 + sovProduct(uint64(m.CreateUser))
	}
	if m.UpdateUser != 0 {
		n += 1 + sovProduct(uint64(m.UpdateUser))
	}
	l = len(m.ProductDetailContent)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovProduct(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovProduct(uint64(l))
	}
	return n
}

func (m *ListQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovProduct(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovProduct(uint64(m.Page))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Where)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListQuery != nil {
		l = m.ListQuery.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.Product != nil {
		l = m.Product.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Total != 0 {
		n += 1 + sovProduct(uint64(m.Total))
	}
	if m.Product != nil {
		l = m.Product.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if len(m.ProductList) > 0 {
		for _, e := range m.ProductList {
			l = e.Size()
			n += 1 + l + sovProduct(uint64(l))
		}
	}
	return n
}

func sovProduct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProduct(x uint64) (n int) {
	return sovProduct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIntro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductIntro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductCategoryId", wireType)
			}
			m.ProductCategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductCategoryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductCoverImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductCoverImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductCarousel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductCarousel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OriginalPrice = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SellingPrice = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StockNum", wireType)
			}
			m.StockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StockNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductSellStatus", wireType)
			}
			m.ProductSellStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductSellStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateUser", wireType)
			}
			m.CreateUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateUser |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUser", wireType)
			}
			m.UpdateUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateUser |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDetailContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductDetailContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Where", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Where = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListQuery == nil {
				m.ListQuery = &ListQuery{}
			}
			if err := m.ListQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Product == nil {
				m.Product = &Product{}
			}
			if err := m.Product.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Product == nil {
				m.Product = &Product{}
			}
			if err := m.Product.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductList = append(m.ProductList, &Product{})
			if err := m.ProductList[len(m.ProductList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProduct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProduct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProduct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProduct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProduct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProduct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProduct = fmt.Errorf("proto: unexpected end of group")
)
