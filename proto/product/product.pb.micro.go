// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product/product.proto

package product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Products service

func NewProductsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Products service

type ProductsService interface {
	// 获取商品列表
	GetProductsByPage(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 商品是否存在
	Exist(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 创建商品
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 更新商品
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 删除商品
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 商品详情
	Info(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type productsService struct {
	c    client.Client
	name string
}

func NewProductsService(name string, c client.Client) ProductsService {
	return &productsService{
		c:    c,
		name: name,
	}
}

func (c *productsService) GetProductsByPage(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Products.GetProductsByPage", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) Exist(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Products.Exist", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Products.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Products.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Products.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) Info(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Products.Info", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Products service

type ProductsHandler interface {
	// 获取商品列表
	GetProductsByPage(context.Context, *Request, *Response) error
	// 商品是否存在
	Exist(context.Context, *Request, *Response) error
	// 创建商品
	Create(context.Context, *Request, *Response) error
	// 更新商品
	Update(context.Context, *Request, *Response) error
	// 删除商品
	Delete(context.Context, *Request, *Response) error
	// 商品详情
	Info(context.Context, *Request, *Response) error
}

func RegisterProductsHandler(s server.Server, hdlr ProductsHandler, opts ...server.HandlerOption) error {
	type products interface {
		GetProductsByPage(ctx context.Context, in *Request, out *Response) error
		Exist(ctx context.Context, in *Request, out *Response) error
		Create(ctx context.Context, in *Request, out *Response) error
		Update(ctx context.Context, in *Request, out *Response) error
		Delete(ctx context.Context, in *Request, out *Response) error
		Info(ctx context.Context, in *Request, out *Response) error
	}
	type Products struct {
		products
	}
	h := &productsHandler{hdlr}
	return s.Handle(s.NewHandler(&Products{h}, opts...))
}

type productsHandler struct {
	ProductsHandler
}

func (h *productsHandler) GetProductsByPage(ctx context.Context, in *Request, out *Response) error {
	return h.ProductsHandler.GetProductsByPage(ctx, in, out)
}

func (h *productsHandler) Exist(ctx context.Context, in *Request, out *Response) error {
	return h.ProductsHandler.Exist(ctx, in, out)
}

func (h *productsHandler) Create(ctx context.Context, in *Request, out *Response) error {
	return h.ProductsHandler.Create(ctx, in, out)
}

func (h *productsHandler) Update(ctx context.Context, in *Request, out *Response) error {
	return h.ProductsHandler.Update(ctx, in, out)
}

func (h *productsHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.ProductsHandler.Delete(ctx, in, out)
}

func (h *productsHandler) Info(ctx context.Context, in *Request, out *Response) error {
	return h.ProductsHandler.Info(ctx, in, out)
}
